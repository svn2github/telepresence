#summary [Support] Building Source code
#labels Featured,Phase-Support,Phase-Design

This is the most important part as it’s where you’ll decide which features to support/enable. The Telepresence system use [https://code.google.com/p/doubango/ Doubango VoIP Framework] (requires *SVN r901 or later*) and it’s highly recommended to rebuild it if you already have an old version installed because of some new and required features. 

This section explains how to build the product on *CentOS64* but could be easily adapted for any Linux, Windows ([http://www.mingw.org/ MinGW]) or OS X ([http://www.macports.org/ MacPorts]).

For any issue, please ask on the [https://groups.google.com/group/opentelepresence telepresence developer group].

<wiki:toc max_depth="3" />

== Preparing the system==
{{{
sudo yum update
sudo yum install make libtool autoconf subversion git wget cmake gcc gcc-c++ pkgconfig
}}}

==Building thirdparties libraries==

===Required libraries===
 * Always: [Support_BuildingSourceCode#Building_libspeex_and_libspeexdsp libspeexdsp], [Support_BuildingSourceCode#Building_FFmpeg FFmpeg] and [Support_BuildingSourceCode#Building_Doubango Doubango]
 * For [http://conf-call.org/ WebRTC] clients: [Support_BuildingSourceCode#Building_libspeex_and_libspeexdsp libspeexdsp], [Support_BuildingSourceCode#Building_libsrtp libsrtp], [Support_BuildingSourceCode#Building_libvpx libvpx], [Support_BuildingSourceCode#Building_OpenSSL OpenSSL 1.0.1+](Firefox only), [Support_BuildingSourceCode#Building_FFmpeg FFmpeg] and [Support_BuildingSourceCode#Building_Doubango Doubango]

===Building libsrtp===
[http://srtp.sourceforge.net/srtp.html libsrtp] is optional unless you want to use WebRTC SIP clients. It’s highly recommended. The [http://conf-call.org/ WebRTC Telepresence demo client] requires a system with SRTP enabled.
{{{
git clone https://github.com/cisco/libsrtp/
cd libsrtp
CFLAGS="-fPIC" ./configure --enable-pic && make && make install
}}}
You should not use any libsrtp package because the latest dev version is required and building the source *by yourself is highly recommended*.

===Building OpenSSL===
[http://www.openssl.org/ OpenSSL] is required if you want to use TLS, WSS (Secure WebSocket) or DTLS-SRTP (also requires libsrtp). *OpenSSL version 1.0.1 is required if you want support for DTLS-SRTP* which is mandatory for WebRTC implementation from Mozilla (Firefox Nightly or Aurora).<br />
This section is only required if you don’t have OpenSSL installed on your system or using version prior to 1.0.1 and want to enable DTLS-SRTP. 
A quick way to have OpenSSL may be installing openssl-devel package but this version will most likely be outdated (prior to 1.0.1). 
Anyways, you can check the version like this: 
{{{ 
openssl version 
}}}
To build OpenSSL:
{{{
wget http://www.openssl.org/source/openssl-1.0.1c.tar.gz
tar -xvzf openssl-1.0.1c.tar.gz
cd openssl-1.0.1c
./config shared --prefix=/usr/local --openssldir=/usr/local/openssl && make && make install
}}}

===Building libogg, libvorbis and libtheora==
These libraries are optional unless you want to use *.webm* or *.mkv* containers.
You can install the devel packages (*recommended*):
{{{
sudo yum install libogg-devel libvorbis-devel libtheora-devel
}}}
Or build the source code by yourself:
{{{
--This section intentionally left blank--
}}}

===Building libspeex and libspeexdsp===
[http://www.speex.org/ libspeex] (audio codec) is optional but [http://www.speex.org/ libspeexdsp] (audio resampler, jitter buffer…) is *required*. 
You can install the devel packages:
{{{
sudo yum install speex-devel
}}}
Or build the source by yourself:
{{{
wget http://downloads.xiph.org/releases/speex/speex-1.2beta3.tar.gz
tar -xvzf speex-1.2beta3.tar.gz
cd speex-1.2beta3
./configure --disable-oggtest --without-libogg && make && make install
}}}

===Building YASM===
[http://yasm.tortall.net/ YASM] is only required if you want to enable and build *VPX* (VP8 video codec) or *x264* (H.264 codec). It’s highly recommended.
{{{
wget http://www.tortall.net/projects/yasm/releases/yasm-1.2.0.tar.gz
tar -xvzf yasm-1.2.0.tar.gz
cd yasm-1.2.0
./configure && make && make install
}}}

===Building libvpx===
[http://www.webmproject.org/code/ libvpx] adds support for [http://en.wikipedia.org/wiki/VP8 VP8] and is optional but highly recommended if you want support for video when using Google Chrome or Mozilla Firefox. libvpx is required if you want to use *.webm* container or our [http://conf-call.org/ WebRTC SIP Telepresence client].
You can install the devel packages:
{{{
sudo yum install libvpx-devel
}}}
Or build the source by yourself:
{{{
git clone http://git.chromium.org/webm/libvpx.git
cd libvpx
./configure --enable-realtime-only --enable-error-concealment --disable-examples --enable-vp8 --enable-pic --enable-shared --as=yasm
make && make install
}}}

===Building opencore-amr===
[http://sourceforge.net/projects/opencore-amr/ opencore-amr] is optional. Adds support for AMR audio codec.
{{{
git clone git://opencore-amr.git.sourceforge.net/gitroot/opencore-amr/opencore-amr
autoreconf --install && ./configure && make && make install
}}}

===Building libopus===
[http://www.opus-codec.org/ libopus] is optional but highly recommended as it’s an MTI codec for [http://www.webrtc.org/ WebRTC]. Adds support for Opus audio codec.
{{{
wget http://downloads.xiph.org/releases/opus/opus-1.0.2.tar.gz
tar -xvzf opus-1.0.2.tar.gz
cd opus-1.0.2
./configure --with-pic --enable-float-approx && make && make install
}}}

===Building libgsm===
[http://en.wikipedia.org/wiki/Full_Rate libgsm] is optional. Adds support for [http://en.wikipedia.org/wiki/Full_Rate GSM] audio codec.
You can install the devel packages (*recommended*):
{{{
sudo yum install gsm-devel
}}}
Or build the source by yourself:
{{{
wget http://www.quut.com/gsm/gsm-1.0.13.tar.gz
tar -xvzf gsm-1.0.13.tar.gz
cd gsm-1.0-pl13 && make && make install
#cp -rf ./inc/* /usr/local/include
#cp -rf ./lib/* /usr/local/lib
}}}

===Building g729===
[http://en.wikipedia.org/wiki/G.729 G729] is optional. Adds support for G.729 audio codec.
{{{
svn co http://g729.googlecode.com/svn/trunk/ g729b
cd g729b
./autogen.sh && ./configure --enable-static --disable-shared && make && make install
}}}

===Building iLBC===
[http://en.wikipedia.org/wiki/Internet_Low_Bitrate_Codec iLBC] is optional. Adds support for iLBC audio codec.
{{{
svn co http://doubango.googlecode.com/svn/branches/2.0/doubango/thirdparties/scripts/ilbc
cd ilbc
wget http://www.ietf.org/rfc/rfc3951.txt
awk -f extract.awk rfc3951.txt
./autogen.sh && ./configure
make && make install
}}}

===Building x264===
[http://www.videolan.org/developers/x264.html x264] is optional but highly recommended and adds support for H.264 video codec (requires FFmpeg). [http://www.videolan.org/developers/x264.html x264] is required if you want to use *.mp4* container.
{{{
wget ftp://ftp.videolan.org/pub/x264/snapshots/last_x264.tar.bz2
tar -xvjf last_x264.tar.bz2
# the output directory may be difference depending on the version and date
cd x264-snapshot-20121201-2245
./configure --enable-static --enable-pic && make && make install
}}}

===Building libfreetype===
[http://www.freetype.org/ libfreetype] is *required* and used for video overlays.
You can install the devel packages (*recommended*):
{{{
sudo yum install freetype-devel
}}}
Or build the source by yourself:
{{{
wget http://download.savannah.gnu.org/releases/freetype/freetype-2.4.12.tar.bz2
tar -xvjf freetype-2.4.12.tar.bz2
cd freetype-2.4.12
./configure && make && make install
}}}

===Building libfaac===
[http://www.audiocoding.com/faac.html libfaac] is optional unless you want support for [http://en.wikipedia.org/wiki/Advanced_Audio_Coding AAC] audio codec or *.mp4* container for recording.
{{{
wget http://downloads.sourceforge.net/faac/faac-1.28.tar.bz2
tar -xvjf faac-1.28.tar.bz2
cd faac-1.28 && ./configure && make && make install
}}}
_Note: building the tests could fails but you can safely ignore it._

===Building FFmpeg===
[http://www.ffmpeg.org/ FFmpeg] is *required* even if you don’t want support for video.
{{{
# [1] checkout source code
git clone git://source.ffmpeg.org/ffmpeg.git ffmpeg
cd ffmpeg

# [2] grap a release branch
git checkout n1.2

# [3] configure source
./configure \
--extra-cflags="-fPIC" \
--extra-ldflags="-lpthread" \
\
--enable-pic --enable-memalign-hack --enable-pthreads \
--enable-shared --disable-static \
--disable-network --enable-pthreads \
--disable-ffmpeg --disable-ffplay --disable-ffserver --disable-ffprobe \
\
--enable-gpl \
\
--disable-debug \
\
--enable-libfreetype \
\
--enable-libfaac \
\
--enable-nonfree
# [4] build and install
make && make install
}}}
Remove _"--enable-nonfree"_ and _"--enable-libfaac"_ if you don’t want support for [http://en.wikipedia.org/wiki/Advanced_Audio_Coding AAC] audio codec.

===Building OpenAL Soft===
[http://kcat.strangesoft.net/openal.html OpenAL Soft] is optional. Adds support for Stereoscopic (spatial) 3D audio.
{{{
git clone git://repo.or.cz/openal-soft.git
cd openal-soft/build
cmake ..
make && make install
}}}

===Building Doubango===
[https://code.google.com/p/doubango/ Doubango VoIP framework 2.0] *SVN r901 or later is required*.
{{{
svn checkout http://doubango.googlecode.com/svn/branches/2.0/doubango doubango
cd doubango && ./autogen.sh && ./configure --with-speexdsp --with-ffmpeg
make && make install
}}}
Only few options are used to configure the source code and force enabling mandatory libraries. Any optional library is automatically detected. For example, use _"--with-opus"_ to force using Opus audio codec or _"--without-opus"_ to avoid automatic detection. You can also specify a path where to search for a library (e.g. _"--with-opus=/usr/local"_).
Use _"configure --help"_ for more information on supported options.

==Building the Telepresence system==

===Getting the source code===
During the beta phase, the only way to get the source code is via the [https://groups.google.com/group/opentelepresence telepresence developer group]. The first post (pinned and always appear first) contains the source code and new versions will be posted there until the end of the beta phase.

===Building the source code===
{{{
# svn checkout http://telepresence.googlecode.com/svn/trunk/ telepresence
cd telepresence 
# [1] get tinywrap external source (must be named ‘tinywrap’)
svn checkout http://doubango.googlecode.com/svn/branches/2.0/doubango/bindings/_common tinywrap
# [2] configure, build and install
./autogen.sh && ./configure
make && make install
}}}

If no prefix is defined then the binaries will be installed to */usr/local/sbin*.


===Installing the configuration and fonts files===
This is only required for first-time installations and *will override any existing configuration file*.
{{{
make samples
}}}

===Testing===
We highly recommend using our [http://conf-call.org/ WebRTC SIP telepresence client] to test the system.

For more information on how to test the system: click [Support_Testing_the_system here]